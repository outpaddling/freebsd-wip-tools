#!/bin/sh -e

##########################################################################
#   Script description:
#       Import a package from wip to the ports tree
#       
#   History:
#   Date        Name        Modification
#   2018-04-17  Charlie &   Begin
##########################################################################

usage()
{
    printf "Usage: $0 category/port\n"
    exit 1
}


##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


##########################################################################
#   Main
##########################################################################

if [ $# != 1 ] || ! echo $1 | fgrep -q '/'; then
    usage
fi

PORTSDIR=${PORTSDIR:-/usr/ports}
EDITOR=${EDITOR:-vi}

category=$(echo $1 | cut -d / -f 1)
port=$(echo $1 | cut -d / -f 2)

port=`echo $port | sed -e 's|/$||'`

read -p "[U]pdate ports and wip trees [S]kip update [C]ancel " update_ports
case "$update_ports" in
U|u)
    save_cwd=$(pwd)
    cd $PORTSDIR
    git pull
    cd wip
    git pull
    cd $save_cwd
    ;;

S|s)
    ;;

*)
    exit
    ;;

esac

if [ -e $PORTSDIR/$category/$port ]; then
    if ! diff $PORTSDIR/$category/$port/Makefile $PORTSDIR/wip/$port/Makefile \
	| egrep 'PORTVERSION|DISTVERSION|PORTREVISION'; then
	read -p "No change to PORTVERSION or PORTREVISION.  OK to proceed? y/[n] " proceed
	if [ 0"$proceed" != 0y ]; then
	    exit
	fi
    fi

    printf "$PORTSDIR/$category/$port already exists.  Overwrite? y/[n] "
    read overwrite
    if [ 0$overwrite != 0y ]; then
	exit
    fi
fi

cd $PORTSDIR/wip/$port
make clean

rsync -av --delete $PORTSDIR/wip/$port $PORTSDIR/$category

sed -i '' '/^CATEGORIES/s|wip ||' $PORTSDIR/$category/$port/Makefile

cd $PORTSDIR/$category/$port

for file in Makefile pkg-descr; do
    $EDITOR $file
done

while fgrep '$FreeBSD' $PORTSDIR/wip/$port/Makefile | grep -v '^CATEGORIES'; do
    printf "$port contains \$FreeBSD\$ tag.  Editing...\n"
    pause
    $EDITOR $PORTSDIR/wip/$port/Makefile
done

while fgrep -w wip Makefile | grep -v '^CATEGORIES'; do
    printf "$port contains references to wip.  Editing...\n"
    pause
    $EDITOR Makefile
done

make makesum || true   # GO ports change distname with category
if ! which port-check; then
    wip-reinstall-port -u -r port-dev
fi

printf "Run port-check? [y]/n "
read port_check
if [ 0"$port_check" != 0n ]; then
    port-check
fi

# If user chose to overwrite, that means the port already existed and should
# be in category/Makefile already
cd $PORTSDIR/$category
git status || true
if [ 0$overwrite != 0y ]; then
    printf "Add port? y/[n] "
    read add
    if [ 0$add = 0y ]; then
	git add $port
	printf "Add $port to $category/Makefile.\n"
	pause
	$EDITOR Makefile
    fi
else
    # Check for new files
    #git status -s || true
    new_files="$(git status -s | awk '$1 == "??" && $2 ~ "$port" { print $2 }')"
    for file in $new_files; do
	printf "Add $file? [y]/n "
	read add_file
	if [ 0"$add_file" != 0n ]; then
	    git add $file
	fi
    done
fi

read -p "Run port-commit $category/$port? [y]/n " commit
if [ 0"$commit" != 0n ]; then
    port-commit $category/$port
fi
